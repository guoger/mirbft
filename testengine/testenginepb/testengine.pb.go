// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testengine.proto

/*
Package testenginepb is a generated protocol buffer package.

It is generated from these files:
	testengine.proto

It has these top-level messages:
	ScenarioConfig
	NodeConfig
	HashResult
	Request
	Batch
	Checkpoint
	Event
	LogEntry
*/
package testenginepb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import mirbftpb "github.com/IBM/mirbft/mirbftpb"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ScenarioConfig struct {
	Name                 string                  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description          string                  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	InitialNetworkConfig *mirbftpb.NetworkConfig `protobuf:"bytes,3,opt,name=initial_network_config,json=initialNetworkConfig" json:"initial_network_config,omitempty"`
	NodeConfigs          []*NodeConfig           `protobuf:"bytes,4,rep,name=node_configs,json=nodeConfigs" json:"node_configs,omitempty"`
}

func (m *ScenarioConfig) Reset()                    { *m = ScenarioConfig{} }
func (m *ScenarioConfig) String() string            { return proto.CompactTextString(m) }
func (*ScenarioConfig) ProtoMessage()               {}
func (*ScenarioConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ScenarioConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ScenarioConfig) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ScenarioConfig) GetInitialNetworkConfig() *mirbftpb.NetworkConfig {
	if m != nil {
		return m.InitialNetworkConfig
	}
	return nil
}

func (m *ScenarioConfig) GetNodeConfigs() []*NodeConfig {
	if m != nil {
		return m.NodeConfigs
	}
	return nil
}

type NodeConfig struct {
	Id                   uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	HeartbeatTicks       int32  `protobuf:"varint,2,opt,name=heartbeat_ticks,json=heartbeatTicks" json:"heartbeat_ticks,omitempty"`
	SuspectTicks         int32  `protobuf:"varint,3,opt,name=suspect_ticks,json=suspectTicks" json:"suspect_ticks,omitempty"`
	NewEpochTimeoutTicks int32  `protobuf:"varint,4,opt,name=new_epoch_timeout_ticks,json=newEpochTimeoutTicks" json:"new_epoch_timeout_ticks,omitempty"`
	TickInterval         int32  `protobuf:"varint,5,opt,name=tick_interval,json=tickInterval" json:"tick_interval,omitempty"`
	LinkLatency          int32  `protobuf:"varint,6,opt,name=link_latency,json=linkLatency" json:"link_latency,omitempty"`
	ReadyLatency         int32  `protobuf:"varint,7,opt,name=ready_latency,json=readyLatency" json:"ready_latency,omitempty"`
	ProcessLatency       int32  `protobuf:"varint,8,opt,name=process_latency,json=processLatency" json:"process_latency,omitempty"`
	BufferSize           int32  `protobuf:"varint,9,opt,name=buffer_size,json=bufferSize" json:"buffer_size,omitempty"`
}

func (m *NodeConfig) Reset()                    { *m = NodeConfig{} }
func (m *NodeConfig) String() string            { return proto.CompactTextString(m) }
func (*NodeConfig) ProtoMessage()               {}
func (*NodeConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeConfig) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NodeConfig) GetHeartbeatTicks() int32 {
	if m != nil {
		return m.HeartbeatTicks
	}
	return 0
}

func (m *NodeConfig) GetSuspectTicks() int32 {
	if m != nil {
		return m.SuspectTicks
	}
	return 0
}

func (m *NodeConfig) GetNewEpochTimeoutTicks() int32 {
	if m != nil {
		return m.NewEpochTimeoutTicks
	}
	return 0
}

func (m *NodeConfig) GetTickInterval() int32 {
	if m != nil {
		return m.TickInterval
	}
	return 0
}

func (m *NodeConfig) GetLinkLatency() int32 {
	if m != nil {
		return m.LinkLatency
	}
	return 0
}

func (m *NodeConfig) GetReadyLatency() int32 {
	if m != nil {
		return m.ReadyLatency
	}
	return 0
}

func (m *NodeConfig) GetProcessLatency() int32 {
	if m != nil {
		return m.ProcessLatency
	}
	return 0
}

func (m *NodeConfig) GetBufferSize() int32 {
	if m != nil {
		return m.BufferSize
	}
	return 0
}

type HashResult struct {
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*HashResult_Request
	//	*HashResult_Batch
	Type isHashResult_Type `protobuf_oneof:"type"`
}

func (m *HashResult) Reset()                    { *m = HashResult{} }
func (m *HashResult) String() string            { return proto.CompactTextString(m) }
func (*HashResult) ProtoMessage()               {}
func (*HashResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isHashResult_Type interface {
	isHashResult_Type()
}

type HashResult_Request struct {
	Request *Request `protobuf:"bytes,2,opt,name=request,oneof"`
}
type HashResult_Batch struct {
	Batch *Batch `protobuf:"bytes,3,opt,name=batch,oneof"`
}

func (*HashResult_Request) isHashResult_Type() {}
func (*HashResult_Batch) isHashResult_Type()   {}

func (m *HashResult) GetType() isHashResult_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *HashResult) GetDigest() []byte {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *HashResult) GetRequest() *Request {
	if x, ok := m.GetType().(*HashResult_Request); ok {
		return x.Request
	}
	return nil
}

func (m *HashResult) GetBatch() *Batch {
	if x, ok := m.GetType().(*HashResult_Batch); ok {
		return x.Batch
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*HashResult) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _HashResult_OneofMarshaler, _HashResult_OneofUnmarshaler, _HashResult_OneofSizer, []interface{}{
		(*HashResult_Request)(nil),
		(*HashResult_Batch)(nil),
	}
}

func _HashResult_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*HashResult)
	// type
	switch x := m.Type.(type) {
	case *HashResult_Request:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Request); err != nil {
			return err
		}
	case *HashResult_Batch:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Batch); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("HashResult.Type has unexpected type %T", x)
	}
	return nil
}

func _HashResult_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*HashResult)
	switch tag {
	case 2: // type.request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Request)
		err := b.DecodeMessage(msg)
		m.Type = &HashResult_Request{msg}
		return true, err
	case 3: // type.batch
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Batch)
		err := b.DecodeMessage(msg)
		m.Type = &HashResult_Batch{msg}
		return true, err
	default:
		return false, nil
	}
}

func _HashResult_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*HashResult)
	// type
	switch x := m.Type.(type) {
	case *HashResult_Request:
		s := proto.Size(x.Request)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *HashResult_Batch:
		s := proto.Size(x.Batch)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Request struct {
	Source      uint64                `protobuf:"varint,1,opt,name=source" json:"source,omitempty"`
	RequestData *mirbftpb.RequestData `protobuf:"bytes,2,opt,name=request_data,json=requestData" json:"request_data,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Request) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *Request) GetRequestData() *mirbftpb.RequestData {
	if m != nil {
		return m.RequestData
	}
	return nil
}

type Batch struct {
	Source   uint64              `protobuf:"varint,1,opt,name=source" json:"source,omitempty"`
	Epoch    uint64              `protobuf:"varint,2,opt,name=epoch" json:"epoch,omitempty"`
	SeqNo    uint64              `protobuf:"varint,3,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Requests []*mirbftpb.Request `protobuf:"bytes,5,rep,name=requests" json:"requests,omitempty"`
}

func (m *Batch) Reset()                    { *m = Batch{} }
func (m *Batch) String() string            { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()               {}
func (*Batch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Batch) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *Batch) GetEpoch() uint64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *Batch) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Batch) GetRequests() []*mirbftpb.Request {
	if m != nil {
		return m.Requests
	}
	return nil
}

type Checkpoint struct {
	SeqNo uint64 `protobuf:"varint,1,opt,name=seq_no,json=seqNo" json:"seq_no,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Checkpoint) Reset()                    { *m = Checkpoint{} }
func (m *Checkpoint) String() string            { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()               {}
func (*Checkpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Checkpoint) GetSeqNo() uint64 {
	if m != nil {
		return m.SeqNo
	}
	return 0
}

func (m *Checkpoint) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Event struct {
	Target uint64 `protobuf:"varint,1,opt,name=target" json:"target,omitempty"`
	Time   uint64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	// Types that are valid to be assigned to Type:
	//	*Event_Apply_
	//	*Event_Receive_
	//	*Event_Process_
	//	*Event_Propose_
	//	*Event_Tick_
	Type       isEvent_Type `protobuf_oneof:"type"`
	Dropped    bool         `protobuf:"varint,8,opt,name=dropped" json:"dropped,omitempty"`
	Delayed    uint64       `protobuf:"varint,9,opt,name=delayed" json:"delayed,omitempty"`
	Duplicated uint64       `protobuf:"varint,10,opt,name=duplicated" json:"duplicated,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isEvent_Type interface {
	isEvent_Type()
}

type Event_Apply_ struct {
	Apply *Event_Apply `protobuf:"bytes,3,opt,name=apply,oneof"`
}
type Event_Receive_ struct {
	Receive *Event_Receive `protobuf:"bytes,4,opt,name=receive,oneof"`
}
type Event_Process_ struct {
	Process *Event_Process `protobuf:"bytes,5,opt,name=process,oneof"`
}
type Event_Propose_ struct {
	Propose *Event_Propose `protobuf:"bytes,6,opt,name=propose,oneof"`
}
type Event_Tick_ struct {
	Tick *Event_Tick `protobuf:"bytes,7,opt,name=tick,oneof"`
}

func (*Event_Apply_) isEvent_Type()   {}
func (*Event_Receive_) isEvent_Type() {}
func (*Event_Process_) isEvent_Type() {}
func (*Event_Propose_) isEvent_Type() {}
func (*Event_Tick_) isEvent_Type()    {}

func (m *Event) GetType() isEvent_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Event) GetTarget() uint64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *Event) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Event) GetApply() *Event_Apply {
	if x, ok := m.GetType().(*Event_Apply_); ok {
		return x.Apply
	}
	return nil
}

func (m *Event) GetReceive() *Event_Receive {
	if x, ok := m.GetType().(*Event_Receive_); ok {
		return x.Receive
	}
	return nil
}

func (m *Event) GetProcess() *Event_Process {
	if x, ok := m.GetType().(*Event_Process_); ok {
		return x.Process
	}
	return nil
}

func (m *Event) GetPropose() *Event_Propose {
	if x, ok := m.GetType().(*Event_Propose_); ok {
		return x.Propose
	}
	return nil
}

func (m *Event) GetTick() *Event_Tick {
	if x, ok := m.GetType().(*Event_Tick_); ok {
		return x.Tick
	}
	return nil
}

func (m *Event) GetDropped() bool {
	if m != nil {
		return m.Dropped
	}
	return false
}

func (m *Event) GetDelayed() uint64 {
	if m != nil {
		return m.Delayed
	}
	return 0
}

func (m *Event) GetDuplicated() uint64 {
	if m != nil {
		return m.Duplicated
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Apply_)(nil),
		(*Event_Receive_)(nil),
		(*Event_Process_)(nil),
		(*Event_Propose_)(nil),
		(*Event_Tick_)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// type
	switch x := m.Type.(type) {
	case *Event_Apply_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Apply); err != nil {
			return err
		}
	case *Event_Receive_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Receive); err != nil {
			return err
		}
	case *Event_Process_:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Process); err != nil {
			return err
		}
	case *Event_Propose_:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Propose); err != nil {
			return err
		}
	case *Event_Tick_:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tick); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Type has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 3: // type.apply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Apply)
		err := b.DecodeMessage(msg)
		m.Type = &Event_Apply_{msg}
		return true, err
	case 4: // type.receive
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Receive)
		err := b.DecodeMessage(msg)
		m.Type = &Event_Receive_{msg}
		return true, err
	case 5: // type.process
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Process)
		err := b.DecodeMessage(msg)
		m.Type = &Event_Process_{msg}
		return true, err
	case 6: // type.propose
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Propose)
		err := b.DecodeMessage(msg)
		m.Type = &Event_Propose_{msg}
		return true, err
	case 7: // type.tick
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event_Tick)
		err := b.DecodeMessage(msg)
		m.Type = &Event_Tick_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// type
	switch x := m.Type.(type) {
	case *Event_Apply_:
		s := proto.Size(x.Apply)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Receive_:
		s := proto.Size(x.Receive)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Process_:
		s := proto.Size(x.Process)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Propose_:
		s := proto.Size(x.Propose)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Tick_:
		s := proto.Size(x.Tick)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Event_Apply struct {
	Digests     []*HashResult `protobuf:"bytes,1,rep,name=digests" json:"digests,omitempty"`
	Checkpoints []*Checkpoint `protobuf:"bytes,2,rep,name=checkpoints" json:"checkpoints,omitempty"`
}

func (m *Event_Apply) Reset()                    { *m = Event_Apply{} }
func (m *Event_Apply) String() string            { return proto.CompactTextString(m) }
func (*Event_Apply) ProtoMessage()               {}
func (*Event_Apply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 0} }

func (m *Event_Apply) GetDigests() []*HashResult {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *Event_Apply) GetCheckpoints() []*Checkpoint {
	if m != nil {
		return m.Checkpoints
	}
	return nil
}

type Event_Process struct {
}

func (m *Event_Process) Reset()                    { *m = Event_Process{} }
func (m *Event_Process) String() string            { return proto.CompactTextString(m) }
func (*Event_Process) ProtoMessage()               {}
func (*Event_Process) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 1} }

type Event_Propose struct {
	RequestData *mirbftpb.RequestData `protobuf:"bytes,1,opt,name=request_data,json=requestData" json:"request_data,omitempty"`
}

func (m *Event_Propose) Reset()                    { *m = Event_Propose{} }
func (m *Event_Propose) String() string            { return proto.CompactTextString(m) }
func (*Event_Propose) ProtoMessage()               {}
func (*Event_Propose) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 2} }

func (m *Event_Propose) GetRequestData() *mirbftpb.RequestData {
	if m != nil {
		return m.RequestData
	}
	return nil
}

type Event_Receive struct {
	Source uint64        `protobuf:"varint,1,opt,name=source" json:"source,omitempty"`
	Msg    *mirbftpb.Msg `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Event_Receive) Reset()                    { *m = Event_Receive{} }
func (m *Event_Receive) String() string            { return proto.CompactTextString(m) }
func (*Event_Receive) ProtoMessage()               {}
func (*Event_Receive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 3} }

func (m *Event_Receive) GetSource() uint64 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *Event_Receive) GetMsg() *mirbftpb.Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

type Event_Tick struct {
}

func (m *Event_Tick) Reset()                    { *m = Event_Tick{} }
func (m *Event_Tick) String() string            { return proto.CompactTextString(m) }
func (*Event_Tick) ProtoMessage()               {}
func (*Event_Tick) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6, 4} }

type LogEntry struct {
	// Types that are valid to be assigned to Type:
	//	*LogEntry_Scenario
	//	*LogEntry_Event
	Type isLogEntry_Type `protobuf_oneof:"Type"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isLogEntry_Type interface {
	isLogEntry_Type()
}

type LogEntry_Scenario struct {
	Scenario *ScenarioConfig `protobuf:"bytes,1,opt,name=scenario,oneof"`
}
type LogEntry_Event struct {
	Event *Event `protobuf:"bytes,2,opt,name=event,oneof"`
}

func (*LogEntry_Scenario) isLogEntry_Type() {}
func (*LogEntry_Event) isLogEntry_Type()    {}

func (m *LogEntry) GetType() isLogEntry_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *LogEntry) GetScenario() *ScenarioConfig {
	if x, ok := m.GetType().(*LogEntry_Scenario); ok {
		return x.Scenario
	}
	return nil
}

func (m *LogEntry) GetEvent() *Event {
	if x, ok := m.GetType().(*LogEntry_Event); ok {
		return x.Event
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LogEntry) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LogEntry_OneofMarshaler, _LogEntry_OneofUnmarshaler, _LogEntry_OneofSizer, []interface{}{
		(*LogEntry_Scenario)(nil),
		(*LogEntry_Event)(nil),
	}
}

func _LogEntry_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LogEntry)
	// Type
	switch x := m.Type.(type) {
	case *LogEntry_Scenario:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Scenario); err != nil {
			return err
		}
	case *LogEntry_Event:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("LogEntry.Type has unexpected type %T", x)
	}
	return nil
}

func _LogEntry_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LogEntry)
	switch tag {
	case 1: // Type.scenario
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ScenarioConfig)
		err := b.DecodeMessage(msg)
		m.Type = &LogEntry_Scenario{msg}
		return true, err
	case 2: // Type.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Event)
		err := b.DecodeMessage(msg)
		m.Type = &LogEntry_Event{msg}
		return true, err
	default:
		return false, nil
	}
}

func _LogEntry_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LogEntry)
	// Type
	switch x := m.Type.(type) {
	case *LogEntry_Scenario:
		s := proto.Size(x.Scenario)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LogEntry_Event:
		s := proto.Size(x.Event)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*ScenarioConfig)(nil), "testenginepb.ScenarioConfig")
	proto.RegisterType((*NodeConfig)(nil), "testenginepb.NodeConfig")
	proto.RegisterType((*HashResult)(nil), "testenginepb.HashResult")
	proto.RegisterType((*Request)(nil), "testenginepb.Request")
	proto.RegisterType((*Batch)(nil), "testenginepb.Batch")
	proto.RegisterType((*Checkpoint)(nil), "testenginepb.Checkpoint")
	proto.RegisterType((*Event)(nil), "testenginepb.Event")
	proto.RegisterType((*Event_Apply)(nil), "testenginepb.Event.Apply")
	proto.RegisterType((*Event_Process)(nil), "testenginepb.Event.Process")
	proto.RegisterType((*Event_Propose)(nil), "testenginepb.Event.Propose")
	proto.RegisterType((*Event_Receive)(nil), "testenginepb.Event.Receive")
	proto.RegisterType((*Event_Tick)(nil), "testenginepb.Event.Tick")
	proto.RegisterType((*LogEntry)(nil), "testenginepb.LogEntry")
}

func init() { proto.RegisterFile("testengine.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x51, 0x6f, 0x1b, 0x45,
	0x10, 0x8e, 0x1d, 0x9f, 0xed, 0xcc, 0xb9, 0x29, 0x6c, 0x93, 0xf6, 0x30, 0x88, 0x06, 0xf3, 0xd0,
	0x48, 0x08, 0xa3, 0x06, 0x21, 0xa0, 0x3c, 0x91, 0x10, 0xc9, 0x48, 0x6d, 0x84, 0xb6, 0x79, 0xe3,
	0xe1, 0xb4, 0xbe, 0x9b, 0xd8, 0x2b, 0x5f, 0x76, 0x2f, 0xb7, 0xeb, 0x44, 0x6e, 0xff, 0x02, 0xbf,
	0x86, 0x9f, 0xc2, 0x13, 0x3f, 0x07, 0xed, 0xec, 0xde, 0xd9, 0xa6, 0x89, 0xd4, 0xb7, 0x9d, 0x99,
	0x6f, 0xbe, 0x9d, 0x9d, 0x99, 0xef, 0x0e, 0x3e, 0xb1, 0x68, 0x2c, 0xaa, 0x99, 0x54, 0x38, 0x2e,
	0x2b, 0x6d, 0x35, 0x1b, 0xac, 0x3d, 0xe5, 0x74, 0x78, 0x78, 0x2d, 0xab, 0xe9, 0x95, 0x2d, 0xa7,
	0xdf, 0xf9, 0x83, 0x07, 0x8d, 0xfe, 0x69, 0xc1, 0xfe, 0xdb, 0x0c, 0x95, 0xa8, 0xa4, 0x3e, 0xd3,
	0xea, 0x4a, 0xce, 0x18, 0x83, 0x8e, 0x12, 0xd7, 0x98, 0xb4, 0x8e, 0x5a, 0xc7, 0x7b, 0x9c, 0xce,
	0xec, 0x08, 0xe2, 0x1c, 0x4d, 0x56, 0xc9, 0xd2, 0x4a, 0xad, 0x92, 0x36, 0x85, 0x36, 0x5d, 0xec,
	0x0d, 0x3c, 0x95, 0x4a, 0x5a, 0x29, 0x8a, 0x54, 0xa1, 0xbd, 0xd3, 0xd5, 0x22, 0xcd, 0x88, 0x2f,
	0xd9, 0x3d, 0x6a, 0x1d, 0xc7, 0x27, 0xcf, 0xc6, 0x75, 0x01, 0xe3, 0x0b, 0x1f, 0xf7, 0xd7, 0xf1,
	0x83, 0x90, 0xb6, 0xe5, 0x65, 0xbf, 0xc0, 0x40, 0xe9, 0x1c, 0x03, 0x87, 0x49, 0x3a, 0x47, 0xbb,
	0xc7, 0xf1, 0x49, 0x32, 0xde, 0x7c, 0xd3, 0xf8, 0x42, 0xe7, 0x18, 0x58, 0x62, 0xd5, 0x9c, 0xcd,
	0xe8, 0xdf, 0x36, 0xc0, 0x3a, 0xc6, 0xf6, 0xa1, 0x2d, 0x73, 0x7a, 0x4e, 0x87, 0xb7, 0x65, 0xce,
	0x5e, 0xc0, 0xe3, 0x39, 0x8a, 0xca, 0x4e, 0x51, 0xd8, 0xd4, 0xca, 0x6c, 0x61, 0xe8, 0x41, 0x11,
	0xdf, 0x6f, 0xdc, 0x97, 0xce, 0xcb, 0xbe, 0x86, 0x47, 0x66, 0x69, 0x4a, 0xcc, 0x6a, 0xd8, 0x2e,
	0xc1, 0x06, 0xc1, 0xe9, 0x41, 0x3f, 0xc0, 0x33, 0x85, 0x77, 0x29, 0x96, 0x3a, 0x9b, 0xa7, 0x56,
	0x5e, 0xa3, 0x5e, 0xd6, 0xf0, 0x0e, 0xc1, 0x0f, 0x14, 0xde, 0x9d, 0xbb, 0xe8, 0xa5, 0x0f, 0x36,
	0xdc, 0x0e, 0x94, 0x4a, 0x65, 0xb1, 0xba, 0x15, 0x45, 0x12, 0x79, 0x6e, 0xe7, 0xfc, 0x3d, 0xf8,
	0xd8, 0x57, 0x30, 0x28, 0xa4, 0x5a, 0xa4, 0x85, 0xb0, 0xa8, 0xb2, 0x55, 0xd2, 0x25, 0x4c, 0xec,
	0x7c, 0xaf, 0xbd, 0xcb, 0xf1, 0x54, 0x28, 0xf2, 0x55, 0x83, 0xe9, 0x79, 0x1e, 0x72, 0xd6, 0xa0,
	0x17, 0xf0, 0xb8, 0xac, 0x74, 0x86, 0xc6, 0x34, 0xb0, 0xbe, 0x7f, 0x71, 0x70, 0xd7, 0xc0, 0xe7,
	0x10, 0x4f, 0x97, 0x57, 0x57, 0x58, 0xa5, 0x46, 0xbe, 0xc3, 0x64, 0x8f, 0x40, 0xe0, 0x5d, 0x6f,
	0xe5, 0x3b, 0x1c, 0xfd, 0xd5, 0x02, 0x98, 0x08, 0x33, 0xe7, 0x68, 0x96, 0x85, 0x65, 0x4f, 0xa1,
	0x9b, 0xcb, 0x19, 0x1a, 0x4b, 0xed, 0x1d, 0xf0, 0x60, 0xb1, 0x97, 0xd0, 0xab, 0xf0, 0x66, 0xe9,
	0x02, 0x6d, 0x1a, 0xff, 0xe1, 0xf6, 0xe4, 0xb8, 0x0f, 0x4e, 0x76, 0x78, 0x8d, 0x63, 0xdf, 0x40,
	0x34, 0x15, 0x36, 0x9b, 0x87, 0x7d, 0x79, 0xb2, 0x9d, 0x70, 0xea, 0x42, 0x93, 0x1d, 0xee, 0x31,
	0xa7, 0x5d, 0xe8, 0xd8, 0x55, 0x89, 0xa3, 0x3f, 0xa1, 0x17, 0xa8, 0x5c, 0x29, 0x46, 0x2f, 0xab,
	0x0c, 0xc3, 0xa4, 0x83, 0xc5, 0x7e, 0x82, 0x41, 0xb8, 0x22, 0xcd, 0x85, 0x15, 0x4d, 0x3d, 0xcd,
	0x3a, 0x06, 0x82, 0xdf, 0x84, 0x15, 0x3c, 0xae, 0xd6, 0xc6, 0xe8, 0x3d, 0x44, 0x74, 0xed, 0x83,
	0xd4, 0x07, 0x10, 0xd1, 0xd8, 0x89, 0xb3, 0xc3, 0xbd, 0xc1, 0x0e, 0xa1, 0x6b, 0xf0, 0x26, 0x55,
	0x9a, 0x5e, 0xd2, 0xe1, 0x91, 0xc1, 0x9b, 0x0b, 0xcd, 0xbe, 0x85, 0x7e, 0x20, 0x37, 0x49, 0x44,
	0xdb, 0xfc, 0xe9, 0x07, 0x35, 0xf0, 0x06, 0x32, 0xfa, 0x19, 0xe0, 0x6c, 0x8e, 0xd9, 0xa2, 0xd4,
	0x52, 0xd9, 0x0d, 0xce, 0xd6, 0x26, 0xe7, 0x01, 0x44, 0xb7, 0xa2, 0x58, 0x22, 0x15, 0x30, 0xe0,
	0xde, 0x18, 0xfd, 0x1d, 0x41, 0x74, 0x7e, 0x8b, 0x8a, 0x7a, 0x62, 0x45, 0x35, 0x43, 0x5b, 0x17,
	0xee, 0x2d, 0x27, 0x71, 0xb7, 0xa9, 0xa1, 0x6e, 0x3a, 0xb3, 0x97, 0x10, 0x89, 0xb2, 0x2c, 0x56,
	0xa1, 0xff, 0x9f, 0x6d, 0xf7, 0x9f, 0xf8, 0xc6, 0xbf, 0x3a, 0x80, 0x9b, 0x02, 0x21, 0xd9, 0x8f,
	0x6e, 0xca, 0x19, 0xca, 0x5b, 0xa4, 0x55, 0x8f, 0x4f, 0x3e, 0xbf, 0x2f, 0x89, 0x7b, 0x88, 0x9f,
	0x35, 0x1d, 0x5d, 0x62, 0x58, 0x3c, 0x5a, 0xfb, 0x07, 0x12, 0xff, 0xf0, 0x10, 0x97, 0x18, 0xd0,
	0x21, 0xb1, 0xd4, 0x06, 0x49, 0x0b, 0x0f, 0x27, 0x3a, 0x48, 0x48, 0x74, 0x47, 0x36, 0x76, 0x2f,
	0xce, 0x16, 0xa4, 0x8e, 0x0f, 0xbe, 0x23, 0x3e, 0xcb, 0xe9, 0x72, 0xb2, 0xc3, 0x09, 0xc7, 0x12,
	0xe8, 0xe5, 0x95, 0x2e, 0x4b, 0xcc, 0x49, 0x29, 0x7d, 0x5e, 0x9b, 0x14, 0xc1, 0x42, 0xac, 0x30,
	0x27, 0x79, 0x74, 0x78, 0x6d, 0xb2, 0x2f, 0x01, 0xf2, 0x65, 0x59, 0xc8, 0x4c, 0x58, 0xcc, 0x13,
	0xa0, 0xe0, 0x86, 0x67, 0x78, 0x07, 0x11, 0x35, 0x90, 0x9d, 0x40, 0xcf, 0xeb, 0xc4, 0x24, 0xad,
	0xfb, 0xbe, 0x6b, 0x6b, 0x81, 0xf1, 0x1a, 0xc8, 0x5e, 0x41, 0x9c, 0x35, 0xfb, 0xe0, 0x3e, 0x58,
	0xf7, 0xe4, 0xad, 0x17, 0x86, 0x6f, 0x82, 0x87, 0x7b, 0xd0, 0x0b, 0xbd, 0x1c, 0x9e, 0xd1, 0x91,
	0x5a, 0xf2, 0x7f, 0x61, 0xb4, 0x3e, 0x56, 0x18, 0xc3, 0x53, 0xa7, 0x3a, 0x3f, 0xc9, 0x87, 0xa4,
	0xf1, 0x1c, 0x76, 0xaf, 0xcd, 0x2c, 0x88, 0xed, 0xd1, 0x9a, 0xf3, 0x8d, 0x99, 0x71, 0x17, 0x19,
	0x76, 0xa1, 0xe3, 0x1a, 0xde, 0x28, 0xf9, 0x3d, 0xf4, 0x5f, 0xeb, 0xd9, 0xb9, 0xb2, 0xd5, 0x8a,
	0xbd, 0x82, 0xbe, 0x09, 0xff, 0xa4, 0x50, 0xd5, 0x17, 0xdb, 0x0f, 0xdd, 0xfe, 0x63, 0x4d, 0x76,
	0x78, 0x83, 0x77, 0x9f, 0x11, 0x74, 0xe3, 0x0c, 0x57, 0x3f, 0xb9, 0x67, 0xd2, 0x6e, 0x81, 0x09,
	0xe3, 0x2e, 0xbf, 0x5c, 0x95, 0x38, 0xed, 0xd2, 0xcf, 0xf0, 0xfb, 0xff, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xd4, 0x99, 0x46, 0x83, 0x45, 0x07, 0x00, 0x00,
}
